{"version":3,"sources":["CircleAnimation.js","CircleBorder.js","Timer.js","App.js","reportWebVitals.js","index.js"],"names":["CircleAnimation","props","circumference","Math","PI","className","height","width","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","percentDone","CircleBorder","radius","x","y","textAnchor","fontSize","dy","countdownText","Timer","audio","Audio","state","date","Date","countdown","countTo","stopped","percentage","timerIsSet","this","timerInterval","setInterval","tick","clearInterval","setState","loop","play","pause","secs","toISOString","substr","formatSecsToHHMMSS","React","Component","App","dateOnLoad","inputSeconds","useRef","inputMinutes","inputHours","useState","updateTimerIsSet","updateCountTo","useEffect","document","title","id","onSubmit","e","preventDefault","totalInput","Number","current","value","type","ref","min","max","defaultValue","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7dfd3d9c.chunk.js","sourcesContent":["import \"./App.css\";\n\nconst CircleAnimation = (props) => {\n  const radius = 300;\n  const circumference = 2 * Math.PI * radius;\n  const strokeWidth = 8;\n  const circleContainerSize = 2 * radius + 4 * strokeWidth;\n\n  return (\n    <svg\n      className=\"circle-container\"\n      height={circleContainerSize}\n      width={circleContainerSize}\n    >\n      <circle\n        className=\"progress-ring-circle\"\n        cx=\"50%\"\n        cy=\"50%\"\n        r={radius}\n        fill=\"none\"\n        stroke=\"#d10892\"\n        strokeWidth={strokeWidth}\n        strokeDasharray={`${circumference} ${circumference}`}\n        strokeDashoffset={circumference * (1 - props.percentDone)}\n      />\n    </svg>\n  );\n};\n\nexport default CircleAnimation;\n","import \"./App.css\";\n\nconst CircleBorder = (props) => {\n  const radius = 300;\n  const strokeWidth = 8;\n  const circleContainerSize = 2 * radius + 4 * strokeWidth;\n  return (\n    <svg\n      className=\"circle-container\"\n      height={circleContainerSize}\n      width={circleContainerSize}\n    >\n      <circle\n        className=\"circle-border\"\n        cx=\"50%\"\n        cy=\"50%\"\n        r={radius}\n        fill=\"none\"\n        stroke=\"white\"\n        strokeWidth={strokeWidth}\n      />\n      <circle\n        className=\"circle-border\"\n        cx=\"50%\"\n        cy=\"50%\"\n        r={radius + strokeWidth / 2 + 1}\n        fill=\"none\"\n        stroke=\"#ffb700\"\n        strokeWidth=\"2\"\n      />\n\n      <text\n        x=\"50%\"\n        y=\"50%\"\n        textAnchor=\"middle\"\n        fill=\"white\"\n        stroke=\"#d10892\"\n        strokeWidth=\"2\"\n        fontSize=\"90px\"\n        dy=\".3em\"\n      >\n        {props.countdownText}\n      </text>\n    </svg>\n  );\n};\n\nexport default CircleBorder;\n","import React from \"react\";\nimport CircleAnimation from \"./CircleAnimation.js\";\nimport CircleBorder from \"./CircleBorder.js\";\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      countdown: this.props.countTo,\n      stopped: false,\n      percentage: 0,\n      timerIsSet: this.props.timerIsSet,\n    };\n  }\n\n  audio = new Audio(\"/beep.mp3\");\n\n  componentDidMount() {\n    this.timerInterval = setInterval(() => {\n      if (this.state.countdown > 1) {\n        this.tick();\n      } else {\n        clearInterval(this.timerInterval);\n        this.setState({ countdown: \"Timer done!\", percentage: 1 });\n        this.audio.loop = true;\n        this.audio.play();\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerInterval);\n    this.audio.pause();\n  }\n\n  tick() {\n    if (this.state.stopped === false) {\n      this.setState({\n        date: new Date(),\n        percentage:\n          (this.props.countTo - this.state.countdown) / this.props.countTo,\n        countdown: this.state.countdown - 1,\n      });\n    }\n  }\n\n  formatSecsToHHMMSS(secs) {\n    if (this.state.countdown > 0) {\n      return new Date(secs * 1000).toISOString().substr(11, 8);\n    } else {\n      return \"Timer done!\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"circle-container\">\n        <CircleBorder\n          countdownText={this.formatSecsToHHMMSS(this.state.countdown)}\n        />\n        <CircleAnimation percentDone={this.state.percentage} />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import \"./App.css\";\nimport Timer from \"./Timer.js\";\nimport CircleBorder from \"./CircleBorder.js\";\nimport { useState, useRef, useEffect } from \"react\";\n\nconst App = () => {\n  const dateOnLoad = new Date();\n  const inputSeconds = useRef(null);\n  const inputMinutes = useRef(null);\n  const inputHours = useRef(null);\n  const [timerIsSet, updateTimerIsSet] = useState(false);\n  const [countTo, updateCountTo] = useState(0);\n\n  useEffect(() => {\n    document.title = \"Timer\";\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const totalInput =\n      Number(inputSeconds.current.value) +\n      60 * Number(inputMinutes.current.value) +\n      3600 * Number(inputHours.current.value);\n    updateCountTo(totalInput);\n    updateTimerIsSet(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {timerIsSet ? (\n        <Timer dateOnLoad={dateOnLoad} countTo={countTo} />\n      ) : (\n        <div className=\"circle-container\">\n          <CircleBorder />\n          <div className=\"control-panel\">\n            <form id=\"timerInputForm\" onSubmit={handleSubmit}>\n              <label>\n                <input\n                  className=\"timerInput\"\n                  type=\"number\"\n                  ref={inputHours}\n                  min=\"0\"\n                  max=\"23\"\n                  defaultValue=\"00\"\n                />\n                {\"hrs  \"}\n              </label>\n              <label>\n                <input\n                  className=\"timerInput\"\n                  type=\"number\"\n                  ref={inputMinutes}\n                  min=\"0\"\n                  max=\"59\"\n                  defaultValue=\"02\"\n                />\n                {\"mins  \"}\n              </label>\n              <label>\n                <input\n                  className=\"timerInput\"\n                  type=\"number\"\n                  ref={inputSeconds}\n                  min=\"0\"\n                  max=\"59\"\n                  defaultValue=\"00\"\n                />\n                {\"secs \"}\n              </label>\n              <input id=\"startButton\" type=\"submit\" value=\"Start\" />\n            </form>\n          </div>\n        </div>\n      )}\n      {timerIsSet ? (\n        <button className=\"stopButton\" onClick={() => updateTimerIsSet(false)}>\n          Stop\n        </button>\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}